Class CT.BSP.SMP.Comm Extends %Persistent
{

Property Type As %String;

Property Code As %String(MAXLEN = 100);

Property Description As %String(MAXLEN = 100, TRUNCATE = 1);

Property Note As %String(MAXLEN = 500, TRUNCATE = 1);

Property Active As %Boolean;

/// 顺序
Property Sort As %String(MAXLEN = 10, TRUNCATE = 1);

Index TypeCode On (Type As Exact, Code As Exact);

Index TypeDesc On (Type As Exact, Description As Exact);

ClassMethod GetDesc(Type = "", Code = "")
{
	q:(Type="")||(Code="") ""
	s id =$o(^CT.BSP.SMP.CommI("TypeCode",Type,Code,""))
	q:id="" ""
	q $lg(^CT.BSP.SMP.CommD(id),4)
}

ClassMethod GetCodeByDesc(Type = "", Desc = "")
{
	q:(Type="")||(Desc="") ""
	s id="",ret=""
	for {
		s id =$o(^CT.BSP.SMP.CommI("TypeDesc",Type,Desc,id),-1)
		q:id=""
		s code=$lg(^CT.BSP.SMP.CommD(id),3)
		if code'="" s ret=code q
	}
	q ret
}

/// 是不是有效的字典数据
ClassMethod IsActiveDicData(Type = "", Code = "")
{
	q:(Type="")||(Code="") 0
	s id =$o(^CT.BSP.SMP.CommI("TypeCode",Type,Code,""))
	q:id="" 0
	q $lg(^CT.BSP.SMP.CommD(id),6)=1
}

/// Generated by a.util.U5 at 2019-12-09 16:47:32
ClassMethod Save(Id = "", Type = "", Code = "", Description = "", Note = "", Active = "", IsPar = 0, Sort = "")
{
	If Id>0{
		Set obj = ##class(CT.BSP.SMP.Comm).%OpenId(Id)
	}else{
		q:Type="" "-1^字典代码不能为空"
		if IsPar=1 {
			if Code'="" q "-1^字典不能有数据代码"  
			if $d(^CT.BSP.SMP.CommI("TypeCode",Type,-100000000000000)) q "-1^字典代码："_Type_"已存在"
		}else{
			if Code="" q "-1^代码不能为空"
			if '$d(^CT.BSP.SMP.CommI("TypeCode",Type,-100000000000000)) q "-1^字典"_Type_"不存在"
			if $d(^CT.BSP.SMP.CommI("TypeCode",Type,Code)) q "-1^字典"_Type_"数据代码："_Code_"已存在"
		}
		Set obj = ##class(CT.BSP.SMP.Comm).%New()
		set obj.Type=Type
		set obj.Code=Code
	}
	if $IsObject(obj){
		set obj.Active=(Active=1)
		set obj.Description=Description
		set obj.Note=Note
		set obj.Sort=Sort
		set sc = obj.%Save()
		if $$$ISERR(sc){
			Quit "-1^保存失败"_$system.Status.GetErrorText(sc)
		}
		Set Id = obj.%Id()
		do obj.%Close()
		Set obj = ""
	}else{
		q "-1^未知错误"	
	}
	q Id
}

/// Generated by a.util.U5 at 2019-12-09 16:47:32
ClassMethod Delete(Id = "")
{
	If Id="" q "-1^IdIsNull"
	if '$d(^CT.BSP.SMP.CommD(Id)) q "-1^Id="_Id_"，不正确"
	if $lg(^CT.BSP.SMP.CommD(Id),3)="" { //是字典  要删字典数据
		s type=$lg(^CT.BSP.SMP.CommD(Id),2)
		TS
		&sql(
			delete from CT_BSP_SMP.Comm where Type=:type
		)
		if SQLCODE{
			s ret= "-1^"_SQLCODE_$s('SQLCODE:"",SQLCODE'=100:" "_$g(%msg)_" "_$g(%mdiag(1)),1:"") 
			tro
			q ret
		}
		TC
		q Id
	}else{
		set sc = ##class(CT.BSP.SMP.Comm).%DeleteId(Id)
		if $$$ISERR(sc){
			Quit "-1^DelFail"_$system.Status.GetErrorText(sc)
		}
	}

	Quit Id
}

/// d ##class(%ResultSet).RunQuery("CT.BSP.SMP.Comm","Find")
Query Find(q = "", Type = "", IsPar = 0, Active = "") As websys.Query(CONTAINID = 1, ROWSPEC = "TId:%String,TActive:%String,TCode:%String,TDescription:%String,TNote:%String,TType:%String,TSort:%String")
{
}

/// Generated by a.util.U5 at 2019-12-09 16:47:32
ClassMethod FindExecute(ByRef QHandle As %Library.Binary, q = "", Type = "", IsPar = 0, Active = "") As %Library.Status
{
	s repid=$I(^CacheTemp)
	s ind=1
	s QHandle=$lb(0,repid,0)
	q:(IsPar'=1)&&(Type="") $$$OK 
	
	k tempList
	s tempList="",tempInd=1
	
	s qU=$zcvt(q,"U")
	set iType=""
	if Type'="" s iType=$o(^CT.BSP.SMP.CommI("TypeCode",Type),-1)
	for {
		s iType=$o(^CT.BSP.SMP.CommI("TypeCode",iType))
		q:iType=""
		q:(Type'="")&&(iType'=Type)
		s iCode=""
		for {
			set iCode=$o(^CT.BSP.SMP.CommI("TypeCode",iType,iCode))
			q:iCode=""
			if (IsPar=1) q:(iCode'=-100000000000000) //只查字典时
			else  continue:(iCode=-100000000000000)  //查字典数据时
			
			set TId=$o(^CT.BSP.SMP.CommI("TypeCode",iType,iCode,""))
			set g=^CT.BSP.SMP.CommD(TId)
			set TActive=$lg(g,6)
			continue:(Active'="")&&(Active'=TActive)
			set TCode=$lg(g,3)
			set TDescription=$lg(g,4)
			set TNote=$lg(g,5)
			set TType=$lg(g,2)
			set TSort=$lg(g,7) //顺序
			continue:(IsPar'=1)&&(q'="")&&($zcvt(##class(ext.util.String).ToChineseSpell(TDescription)_","_TDescription_","_TCode,"U")'[qU)
			continue:(IsPar=1)&&(q'="")&&($zcvt(##class(ext.util.String).ToChineseSpell(TDescription)_","_TDescription_","_TType,"U")'[qU)

			s tempList($s(TSort="":-100000000000000,1:TSort),tempInd)=$lb(TId,TActive,TCode,TDescription,TNote,TType,TSort)
			s tempInd=tempInd+1

			
		}
	}
	
	s sort=""
	for {
		s sort=$o(tempList(sort))
		q:sort=""
		s tempInd=""
		for {
			s tempInd=$o(tempList(sort,tempInd))
			q:tempInd=""
			Set ^CacheTemp(repid,ind)=tempList(sort,tempInd)
			set ind=ind+1
		}
	}
	
	Set QHandle=$lb(0,repid,0) 
	Quit $$$OK
}

Storage Default
{
<Data name="CommDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Type</Value>
</Value>
<Value name="3">
<Value>Code</Value>
</Value>
<Value name="4">
<Value>Description</Value>
</Value>
<Value name="5">
<Value>Note</Value>
</Value>
<Value name="6">
<Value>Active</Value>
</Value>
<Value name="7">
<Value>Sort</Value>
</Value>
</Data>
<DataLocation>^CT.BSP.SMP.CommD</DataLocation>
<DefaultData>CommDefaultData</DefaultData>
<IdLocation>^CT.BSP.SMP.CommD</IdLocation>
<IndexLocation>^CT.BSP.SMP.CommI</IndexLocation>
<StreamLocation>^CT.BSP.SMP.CommS</StreamLocation>
<Type>%Storage.Persistent</Type>
}

}
