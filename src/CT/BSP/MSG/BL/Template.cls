Class CT.BSP.MSG.BL.Template Extends %RegisteredObject [ Owner = {}, ProcedureBlock ]
{

ClassMethod SaveCheck(Id = "", Code = "")
{
	if Code="" q "-1^模板代码不能为空"
	s oid=$o(^CT.BSP.MSG.TemplateI("Code"," "_$zcvt(Code,"U"),""),-1)
	if (oid'="")&&(oid'=Id) q "-1^此模板代码已存在"
	q 1
}

/// Generated by a.util.U5 at 2020-12-23 14:50:54
ClassMethod Save(Id = "", Active = "", Code = "", Desc = "", Note = "", Template = "", Tag = "", BizVariables = "")
{
	s ck=..SaveCheck(Id , Code)
	if ck'=1 q ck
	
	If Id>0{
		Set obj = ##class(CT.BSP.MSG.Template).%OpenId(Id)
	}else{
		Set obj = ##class(CT.BSP.MSG.Template).%New()
	}
	if $IsObject(obj){
		set obj.TMPLActive=Active
		set obj.TMPLCode=Code
		set obj.TMPLDesc=Desc
		set obj.TMPLNote=Note
		set obj.TMPLTemplate=Template
		set obj.TMPLTag=Tag
		if BizVariables'="" {
			set obj.TMPLBizVariables=BizVariables
			if BizVariables="NULL" s obj.TMPLBizVariables=""
		}
		set sc = obj.%Save()
		if $$$ISERR(sc){
			Quit "-1^SaveFail"_$system.Status.GetErrorText(sc)
		}
		Set Id = obj.%Id()
		do obj.%Close()
		Set obj = ""
	}else{
		q "对象打开失败Id="_Id	
	}
	q Id
}

ClassMethod SaveBizVariables(Id, BizVariables)
{
	Set obj = ##class(CT.BSP.MSG.Template).%OpenId(Id)
	if $IsObject(obj){
		set obj.TMPLBizVariables=BizVariables	
		set sc = obj.%Save()
		if $$$ISERR(sc){
			Quit "-1^SaveFail"_$system.Status.GetErrorText(sc)
		}
		Set Id = obj.%Id()
		do obj.%Close()
		Set obj = ""
	}else{
		q "-1^对象打开失败Id="_Id	
	}
	q Id
}

/// Generated by a.util.U5 at 2020-12-23 14:50:54
ClassMethod Delete(Id = "")
{
	If Id="" q "-1^IdIsNull"
	set sc = ##class(CT.BSP.MSG.Template).%DeleteId(Id)
	if $$$ISERR(sc){
		Quit "-1^DelFail"_$system.Status.GetErrorText(sc)
	}
	Quit Id
}

/// d ##class(%ResultSet).RunQuery("CT.BSP.MSG.BL.Template","Find")
Query Find(q As %String = "", Tag = "") As websys.Query(CONTAINID = 1, ROWSPEC = "TId:%String,TActive:%String,TCode:%String,TDesc:%String,TNote:%String,TTemplate:%String,TTag:%String,TBizVariables:%String")
{
}

/// Generated by a.util.U5 at 2020-12-23 14:50:54
ClassMethod FindExecute(ByRef QHandle As %Library.Binary, q As %String = "", Tag = "") As %Library.Status
{
	s repid=$I(^CacheTemp)
	s ind=1
	s QHandle=$lb(0,repid,0)
	s qU=$zcvt(q ,"U")
	set TId=""
	for {
		Set TId=$o(^CT.BSP.MSG.TemplateD(TId))
		Quit:TId=""
		set g=^CT.BSP.MSG.TemplateD(TId)
		set TActive=$lg(g,6)
		set TCode=$lg(g,2)
		set TDesc=$lg(g,3)
		set TNote=$lg(g,5)
		set TTemplate=$lg(g,4)
		set TTag=$lg(g,7)
		continue:(Tag'="")&&(Tag'=TTag)
		continue:(qU'="")&&($zcvt(TCode_","_TDesc_","_##class(ext.util.String).ToChineseSpell(TDesc),"U")'[qU)
		set TBizVariables=$lg(g,8)
		Set ^CacheTemp(repid,ind)=$lb(TId,TActive,TCode,TDesc,TNote,TTemplate,TTag,TBizVariables)
		set ind=ind+1
	}
	Set QHandle=$lb(0,repid,0) 
	Quit $$$OK
}

ClassMethod ParseTmpl(tmpl, ByRef plist)
{
	s start=0,end=0,ind=0,ret=""
	//s tmpl=$replace(tmpl,"""","""""")
	while(1){
		s start=$f(tmpl,"${",ind)
		q:start'>0
		s end=$f(tmpl,"}",start)
		q:end'>0
		s key=$e(tmpl,start,end-2)
		s constant=$e(tmpl,ind,start-3) //当做字符串的部分
		s ret=ret_constant_$case(key,"":"",:$g(plist(key)))
		s ind=end
	}
	s constant=$e(tmpl,ind,$l(tmpl))
	s ret=ret_constant
	q ret
}

ClassMethod Parse(Code, ByRef plist)
{
	s id=$o(^CT.BSP.MSG.TemplateI("Code"," "_$zcvt(Code,"U"),""),-1)
	if id>0 {
		s tmpl=$lg(^CT.BSP.MSG.TemplateD(id),4)
		q ..ParseTmpl(tmpl,.plist)
	}
	q ""
}

ClassMethod GetTmpl(Code)
{
	if Code="" q ""
	if $l(Code)>200 q Code  //消息发送尝试将内容当作模板代码来获取模板，当内容长会报错
	s id=$o(^CT.BSP.MSG.TemplateI("Code"," "_$zcvt(Code,"U"),""),-1)
	if id>0 {
		s tmpl=$lg(^CT.BSP.MSG.TemplateD(id),4)
		q tmpl
	}
	q Code
}

ClassMethod GetTmplId(Code)
{
	if Code="" q ""
	if $l(Code)>200 q Code  //消息发送尝试将内容当作模板代码来获取模板，当内容长会报错
	s id=$o(^CT.BSP.MSG.TemplateI("Code"," "_$zcvt(Code,"U"),""),-1)
	q id
}

ClassMethod BuildMsgVars(ByRef varList)
{
	s varList("MsgContext")="消息内容"
	s varList("MsgCreateUser")="消息发送人"
	s varList("MsgCreateLoc")="消息发送科室"
	s varList("MsgActionType")="消息动作类型"
}

/// d ##class(%ResultSet).RunQuery("CT.BSP.MSG.BL.Template","FindParams","","5")
Query FindParams(q = "", tmplId = "") As websys.Query(ROWSPEC = "ID:%String,PCode:%String,PDesc:%String")
{
}

ClassMethod FindParamsExecute(ByRef qHandle As %Binary, q = "", tmplId = "") As %Status
{
	s repid=$i(^CacheTemp)
 	s ind=1
 	
 	s qU=$zcvt(q,"U")
 	
 	///1.此模板独有变量
 	#dim arr As BSP.SYS.COM.ProxyArray
 	#dim iter As BSP.SYS.COM.IteratorObject
 	if (tmplId>0) {
		s vars=$lg($g(^CT.BSP.MSG.TemplateD(tmplId)),8)
	 	if vars'="" {
		 	
		 	s arr=##class(BSP.SYS.COM.ProxyObject).%FromJSON(vars,.errmsg)
		 	if $IsObject(arr),errmsg="" {
				s iter=arr.%GetIterator()
				while iter.%GetNext(.key,.val) {
					s PCode=val.key
					s PDesc=val.desc	
					s ID="BV-"_$i(bvInd)
					continue:(qU'="")&&( $zcvt(PCode_","_PDesc_","_##class(ext.util.String).ToChineseSpell(PDesc),"U")'[qU )
					Do outputrow
				}	
			}
		 	
		}
	}
	
	///2.消息平台独有变量
	d ..BuildMsgVars(.msgVarList)
	s PCode=""
	for {
		s PCode=$o(msgVarList(PCode))
		q:PCode=""
		s PDesc=msgVarList(PCode)
		s ID="MV-"_$i(mvInd)
		continue:(qU'="")&&( $zcvt(PCode_","_PDesc_","_##class(ext.util.String).ToChineseSpell(PDesc),"U")'[qU )
		Do outputrow
	}
	
 	///3.链接参数处的公共变量
 	s rs=##class(%ResultSet).%New("BSP.SYS.BL.Param:Find")
 	d rs.Execute("","",q)
 	while rs.Next() {
	 	
	 	s PCode=rs.GetDataByName("PCode")
	 	s PDesc=rs.GetDataByName("PDesc")
	 	s ID=rs.GetDataByName("ID")
	 	Do outputrow
	}
	s qHandle=$lb(0,repid,0)
	q $$$OK
outputrow
	s ^CacheTemp(repid,ind)=$lb(ID,PCode,PDesc)
 	s ind=ind+1
	q
}

}
