// Copyright (c) 2001 TrakHealth Pty Limited. ALL RIGHTS RESERVED.

var msgItems=document.getElementById('MessageTypesList');
var intItems=document.getElementById('OutboundHL7InterfacesList');
var frmAry=new Array();
var msgfwdAry=new Array();
Init();

function Init() {
	var obj=document.getElementById('MessageTypesList'); if (obj) obj.onchange=MsgTypeChangeHandler;
	var obj=document.getElementById('OutboundHL7InterfacesList'); if (obj) obj.onchange=InterfacesChangeHandler;
	var obj=document.getElementById('OutboundHL7InterfacesList'); if (obj) obj.onblur=InterfacesBlurHandler;
	var obj=document.getElementById('HL7MFMsgType'); if (obj) obj.onclick=HL7MFMsgTypeClickHandler;
	var obj=document.getElementById('delete1'); if (obj) obj.onclick=DeleteClickHandler;
	var obj=document.getElementById('update1'); if (obj) obj.onclick=UpdateClickHandler;

	msgItems.multiple=false;
}

//this needs to be called after the captions are dumped.
function BodyLoadHandler() {
	if (tsc['Update']) websys_sckeys[tsc['Update']]=UpdateClickHandler;
	if (tsc['Delete Message Type']) websys_sckeys[tsc['Delete Message Type']]=DeleteClickHandler;

	// strMsgFwdAry is populated from ##Class(web.SSHL7MessageForwarding).getMessageForwarding(ParRef).
	var objMsgFwdAry=document.getElementById('strMsgFwdAry');
	var str=objMsgFwdAry.value;
	var ary = str.split("*");
	for(j=0; j<ary.length; j++) {
		var row=ary[j].split("^");
		if (row[0]!="") {
			msgfwdAry[j]=new msgfwdRecord(row[1],row[2],row[3]);
		}
	}

	// Build the entire form's array from msgfwdAry and aryPossibilities (generated by SSHL7MessageForwarding.Edit.csp).
	var prevMsgTypeCode=""
	var arrayno=-1
	for(j=0; j<aryPossibilities.length; j++) {
		var msgfound="";
		var founddesc="";
		var intfound=0;
		strPoss=aryPossibilities[j].split("^");
		for(k=0; k<msgfwdAry.length; k++) {
			if (strPoss[0]==msgfwdAry[k].msgtype) {
				msgfound=msgfwdAry[k].msgtype;
				founddesc=msgfwdAry[k].msgdesc;
				if (strPoss[2]==msgfwdAry[k].interface) {
					intfound=1;
					break;
				}
			}
		}
		if (msgfound!="") {
			if (prevMsgTypeCode!=strPoss[0]) {
				arrayno=arrayno+1;
				frmAry[arrayno]=new Array();
				prevMsgTypeCode=strPoss[0];
				var row=-1;
			}

			row=row+1;
			if (intfound) {
				frmAry[arrayno][row]=new frmRecord(msgfwdAry[k].msgtype,msgfwdAry[k].msgdesc,strPoss[1],strPoss[2],strPoss[3],"Y");
			}
			else {
				frmAry[arrayno][row]=new frmRecord(msgfound,founddesc,strPoss[1],strPoss[2],strPoss[3],"N");
			}
		}
	}

	var obj=document.getElementById('OutboundHL7InterfacesList'); if (obj) obj.disabled=1;
}


function msgfwdRecord(msgtype,msgdesc,interface) {
	this.msgtype=msgtype;
	this.msgdesc=msgdesc;
	this.interface=interface;
}

function frmRecord(msgtype,msgdesc,intid,intcode,intdesc,sel) {
	this.msgtype=msgtype;
	this.msgdesc=msgdesc;
	this.intid=intid;
	this.intcode=intcode;
	this.intdesc=intdesc;
	if (sel=="") sel="N";
	this.sel=sel;
}

function MsgTypeChangeHandler() {
	ResetLookUp();
	var obj=document.getElementById('OutboundHL7InterfacesList'); if (obj) obj.disabled=0;
	BuildIntAry();
}

function InterfacesChangeHandler() {

	return false;
}

function InterfacesBlurHandler() {

	SaveIntAry();
}

function HL7MFMsgTypeClickHandler() {
	ClearInterfaceList();
	var obj=document.getElementById('OutboundHL7InterfacesList'); if (obj) obj.disabled=1;
	msgItems.selectedIndex=-1;
}

function HL7MessageTypeLookUp(str) {
	var lu = str.split("^");
	if (lu[1]!="") {
		//Check selected Message Type not already in Listbox.
		for(j=0; j<msgfwdAry.length; j++) {
			if (msgfwdAry[j].msgtype==lu[1]) {
				alert("'" + lu[0] + "' " + t['AlreadyExist']);
				// Clear LookUp.
				var obj=document.getElementById('HL7MFMsgType');
				if (obj) obj.value="";
				// Set focus to existing Message Type.
				msgItems.selectedIndex=j;
				BuildIntAry();
				websys_setfocus("MessageTypesList");
				return false;
			}
		}

		// Check aryPossibilities for any Outbound Interfaces defined for the selected Message Type.
		var row=0;
		for(j=0; j<aryPossibilities.length; j++) {
			strPoss=aryPossibilities[j].split("^");
			if (strPoss[0]==lu[1]) {
				row=row+1;
			}
		}
		if (row==0) {
			alert("'"+lu[0] + "' " + t['NotDefined']);
			// Clear LookUp.
			var obj=document.getElementById('HL7MFMsgType');
			if (obj) obj.value="";
			// Set focus to Lookup field again.
			websys_setfocus("HL7MFMsgType");
			return false;
		}

		// Add selected LookUp item into Listbox.
		msgItems[msgItems.length]= new Option(lu[0],lu[1]);

		// Add selected LookUp item into msgfwdAry.
		msgfwdAry[msgfwdAry.length]= new msgfwdRecord(lu[1],lu[0],"");

		// Add selected LookUp item into frmAry.
		frmAry[frmAry.length]=new Array();
		row=0;
		for(j=0; j<aryPossibilities.length; j++) {
			strPoss=aryPossibilities[j].split("^");

			if (strPoss[0]==lu[1]) {
				frmAry[frmAry.length-1][row]=new frmRecord(lu[0],lu[1],strPoss[1],strPoss[2],strPoss[3],"N");
				row=row+1;
			}
		}

		// Clear LookUp.
		var obj=document.getElementById('HL7MFMsgType');
		if (obj) obj.value="";

		// make the new entry the selected one.
		msgItems.selectedIndex=msgItems.length-1;

		BuildIntAry();
		websys_setfocus("MessageTypesList");
	}

}

// Build the list of Outbound HL7 Interfaces for the selected Message Type.
function BuildIntAry() {
	var obj=document.getElementById('OutboundHL7InterfacesList'); if (obj) obj.disabled=0;
	ClearInterfaceList();
	var j=msgItems.selectedIndex;
	for(k=0; k<frmAry[j].length; k++) {
		intItems[k]= new Option(frmAry[j][k].intcode+" - "+frmAry[j][k].intdesc);
		if (frmAry[j][k].sel=="Y") intItems[k].selected=1;
	}
}

// Save the selected Interfaces for the selected Message Type to frmAry.
function SaveIntAry() {
	var j=msgItems.selectedIndex;
	for(k=0; k<intItems.length; k++) {
		if (intItems[k].selected) { frmAry[j][k].sel="Y"; }
		else { frmAry[j][k].sel="N"; }
	}
}

// Clear the Interfaces Listbox.
function ClearInterfaceList() {
	for (j=intItems.length;j>0;j--) {
		intItems.remove(j-1);
	}
}

function DeleteClickHandler() {
	ResetLookUp();
	var j=msgItems.selectedIndex;
	if (j==-1) {
		alert(t['NoMessageType']);
		return false;
	}
	else {
		var msgtype=msgfwdAry[j].msgtype;

		// Deselect all Interfaces for this Message Type and clear the Interfaces listbox.
		intItems.selectedIndex=-1;
		SaveIntAry();
		ClearInterfaceList();

		// Delete the frmAry entries for the Interfaces of the selected Message Type.
		for(k=0; k<frmAry[j].length; k++) {
			frmAry[j].splice(k,1);
		}
		// Delete the frmAry entry for the selected Message Type.
		frmAry.splice(j,1);

		// Remove selected item from Array.
		msgfwdAry.splice(j,1);
		// Remove selected item from Listbox.
		msgItems.remove(j);
	}
}

function UpdateClickHandler() {
	ResetLookUp();
	var strBuffer="";
	for (j=0; j<msgItems.length; j++) {
		if (strBuffer!="") strBuffer=strBuffer + "^";
		strBuffer=strBuffer + msgfwdAry[j].msgtype + "|";
		var cnt=0;
		for (k=0; k<frmAry[j].length; k++) {
			if (frmAry[j][k].sel=="Y") {
				if (cnt!=0) strBuffer=strBuffer + "*";
				strBuffer=strBuffer + frmAry[j][k].intcode;
				cnt=cnt+1;
			}
		}
	}
	var obj = document.getElementById('frmAry');
	if (obj) obj.value=strBuffer;
	return update1_click();
}

function ResetLookUp() {
	var obj=document.getElementById('HL7MFMsgType');
	if (obj) {
		obj.value="";
		obj.className="";
	}
}

document.body.onload=BodyLoadHandler;

