<csp:content charset="gb2312">
<csp:content charset="UTF-8">
	<script language=Cache method=OnPreHTTP arguments="" returntype=%Boolean>
		s %response.Timeout=600
		q 1
   </script>
	<script language="cache" runat="server">
	
	s para=$g(%request.Data("para",1))
	s action=$g(%request.Data("action",1))
	s start=$g(%request.Data("start",1))
	set pageSize = $g(%request.Data("limit",1))
	s end=start+pageSize
	s:start>1 start=start+1
	s kpiId=$g(%request.Data("kpiId",1))
	s section=$g(%request.Data("section",1))
	s dateType=$g(%request.Data("dateType",1))
	s isReal=$g(%request.Data("isReal",1))
	s isSim=$g(%request.Data("isSim",1))
	s isPer=$g(%request.Data("isPer",1))
	s isSum=$g(%request.Data("isSum",1))
	s isSecPro=$g(%request.Data("isSecPro",1))
	s sDate=$g(%request.Data("sDate",1))
	s eDate=$g(%request.Data("eDate",1))
	if "preview"=action {
		s isIgnoreTaskExc=$g(%request.Data("isIgnoreTaskExc",1))
		s filterRule=$g(%request.Data("filterRule",1))
		i +isIgnoreTaskExc=0 {
			s monthId=##class(DHCWL.MKPIService.DateUtil).GetMonthIdByName($G(sDate)_":"_$g(eDate),":",dateType)
		}else {
			s ^TEMPDHCWL($j,"CurDay")=+$h
			s monthId=##class(web.DHCWL.KPI.MaintainKpi).GetMonthIdOfTask(kpiId,section)
			k ^TEMPDHCWL($j)
		}
		if (monthId="null")||(+monthId=0) {
			;w "{success:false,info:'没有设置此区间下的指标任务代码！或查询条件不对'}"
			w "{result:0,totalNum:0,root:[]}"
			q
		}
		i isReal=1 s isReal="R"
		e  s isReal=""
		s queryJsonPros="{start:"_start_",end:"_end_",jsonProDeli:&}"
		;w "filterRule="_filterRule
		;q
		//add by wz.2014-12-23
		i $d(%session.Data("LOGON.USERNAME")) s ^TEMPDHCWLKPIDATA("Login-OtherInfos",$j,"Operator")=$g(%session.Data("LOGON.USERNAME"))
		s json=##class(DHCWL.util.UniteQueryData).GetJsonFromQuery("DHCWL.MKPIService.MKPIQuery:QueryKpiById",queryJsonPros,kpiId,monthId,isReal,filterRule)
		//add by wz.2014-12-23
		k ^TEMPDHCWLKPIDATA("Login-OtherInfos",$j,"Operator")
		w json.GetHead()
		d{
			s obj=json.Next()
			w obj
		}while(obj'="")
		i json.GetCount()=0 w "]}"
		q
		s deli="@"
		s columnName="monDesc:%String@kpiCode:%String@kpiDesc:%String@dimDesc:%String@value:%Float"
		s json=##class(web.DHCWL.KPI.MaintainKpi).GetKpiData(kpiId,monthId,isReal,columnName,deli)
		i json="" {
			w "{result:0,totalNum:0,root:[]}"
			q
		}
		s jsonHead=json.GetHead()
		w jsonHead
		d{
			s obj=json.Next()
			w obj
		}while(obj'="")
		i json.GetCount()=0 w "]}"
	}elseif "NewPreview"=action {
		s filterRule=$g(%request.Data("filterRule",1))
		s mode=""
		i (isReal=1) {
			//s isReal="R"
			s mode="R"
		}
		//e  s isReal=""
		if (isSecPro=1){
			if mode'=""{
				s mode=mode_"C"
			}else{
				s mode="C"
			}	
		}
		if (isSum=1){
			if mode'=""{
				s mode=mode_"S"
			}else{
				s mode="S"
			}
		}
		s contractType=""
		if (isSim=1){
			s contractType="SL"
		}
		if (isPer=1){
			if (contractType=""){
				s contractType="PP"
			}else{
				s contractType=contractType_","_"PP"
			}
		}
		s queryJsonPros="{start:"_start_",end:"_end_",jsonProDeli:&}"
		//add by wz.2014-12-23
		i $d(%session.Data("LOGON.USERNAME")) s ^TEMPDHCWLKPIDATA("Login-OtherInfos",$j,"Operator")=$g(%session.Data("LOGON.USERNAME"))
		try{
			s json=##class(DHCWL.util.UniteQueryData).GetJsonFromQuery("DHCWL.MKPIService.MKPIQuery:NewQueryKpiWithContract",queryJsonPros,kpiId,sDate,eDate,,mode,contractType,filterRule)
			i json="" {
				w "{result:0,totalNum:0,root:[]}"
				q
			}
			//add by wz.2014-12-23
			k ^TEMPDHCWLKPIDATA("Login-OtherInfos",$j,"Operator")
			w json.GetHead()
			d{
				s obj=json.Next()
				w obj
			}while(obj'="")
			i json.GetCount()=0 w "]}"
			q
		}catch{
			s infor=$ZERROR
			s errorInfor=$p($ZERROR,"<",2)
			s errorInfor=$p(errorInfor,">",1)
			if (((errorInfor)="NOROUTINE")||((errorInfor)="NOLINE")){
				s errorExeCode=$g(^||TEMPDHCWL("kpiError",$j,"exeStr"))
				s infor="执行代码"_errorExeCode_"不存在"
				w !,"执行代码"_errorExeCode_"不存在",!
			}else{
				w $ZERROR
			}
			if ($g(^||TEMPDHCWL("kpiError",$j,"kpi"))'=""){
				s kpi=$g(^||TEMPDHCWL("kpiError",$j,"kpi"))
				s callFunction=$g(^||TEMPDHCWL("kpiError",$j,"callFunction"))
				s paraKpiRule=$g(^||TEMPDHCWL("kpiError",$j,"paraKpiRule"))
				s paraFilterRule=$g(^||TEMPDHCWL("kpiError",$j,"paraFilterRule"))
				s paraDateScope=$g(^||TEMPDHCWL("kpiError",$j,"paraDateScope"))
				s infor=$g(infor)
				k ^||TEMPDHCWL("kpiError",$j)
				do ##class(DHCWL.MKPILogin.MKPILoginService).MKPILoginErrQuery(kpi,callFunction,paraKpiRule,paraFilterRule,paraDateScope,infor)
			}
			q
		}
	}elseif action="REAHISQuery" {
		s filterRule=$g(%request.Data("filterRule",1))
		;w "filterRule="_filterRule
		;q
		s paraObj="{start:"_start_",end:"_end_",jsonProDeli:&}"
		s json=##class(DHCWL.util.UniteQueryData).GetJsonFromQuery("web.DHCWL.KPI.QueryKpiData:RealHisKpiQuery",paraObj,kpiId,sDate,eDate,,,filterRule)
		i json="" {
			w "{result:0,totalNum:0,root:[]}"
			q
		}
		s jsonHead=json.GetHead()
		w jsonHead
		d{
			s obj=json.Next()
			w obj
		}while(obj'="")
		i json.GetCount()=0 w "]}"
	}elseif action="NewREAHISQuery" {
		s filterRule=$g(%request.Data("filterRule",1))
		;w "filterRule="_filterRule
		;q
		s paraObj="{start:"_start_",end:"_end_",jsonProDeli:&}"
		s contractType=""
		if (isSim=1){
			s isSim="SL"
			s contractType=isSim
		}else{
			s isSim=""
		}
		if (isPer=1){
			s isPer="PP"
			if (contractType=""){
				s contractType=isPer
			}else{
				s contractType=contractType_","_isPer
			}
		}else{
			s isPer=""
		}
		if (isSum=1){
			s isSum="S"
		}else{
			s isSum=""
		}
		try{
			s json=##class(DHCWL.util.UniteQueryData).GetJsonFromQuery("web.DHCWL.KPI.QueryKpiData:RealHisKpiQuery",paraObj,kpiId,sDate,eDate,,isSum,contractType,filterRule)
			i json="" {
				w "{result:0,totalNum:0,root:[]}"
				q
			}
			s jsonHead=json.GetHead()
			w jsonHead
			d{
				s obj=json.Next()
				w obj
			}while(obj'="")
			i json.GetCount()=0 w "]}"
		}catch{
			s infor=$ZERROR
			s errorInfor=$p($ZERROR,"<",2)
			s errorInfor=$p(errorInfor,">",1)
			if (((errorInfor)="NOROUTINE")||((errorInfor)="NOLINE")){
				s errorExeCode=$g(^||TEMPDHCWL("kpiError",$j,"exeStr"))
				s infor="执行代码"_errorExeCode_"不存在"
				w !,"执行代码"_errorExeCode_"不存在",!
			}else{
				w $ZERROR
			}
			if ($g(^||TEMPDHCWL("kpiError",$j,"kpi"))'=""){
				s kpi=$g(^||TEMPDHCWL("kpiError",$j,"kpi"))
				s callFunction=$g(^||TEMPDHCWL("kpiError",$j,"callFunction"))
				s paraKpiRule=$g(^||TEMPDHCWL("kpiError",$j,"paraKpiRule"))
				s paraFilterRule=$g(^||TEMPDHCWL("kpiError",$j,"paraFilterRule"))
				s paraDateScope=$g(^||TEMPDHCWL("kpiError",$j,"paraDateScope"))
				s infor=$g(infor)
				k ^||TEMPDHCWL("kpiError",$j)
				do ##class(DHCWL.MKPILogin.MKPILoginService).MKPILoginErrQuery(kpi,callFunction,paraKpiRule,paraFilterRule,paraDateScope,infor)
			}
			q}
	}elseif action="getKpiCodes" {
		s retData=""
		s kpiIDs=$g(%request.Data("kpiIDs",1))
		s kpiIdLen=$l(kpiIDs,",")
		f i=1:1:kpiIdLen d
		.s kpiID=$p(kpiIDs,",",i)
		.q:$g(kpiID)=""	
		.s code=##class(DHCWL.MKPIIO.XMLIOConfige).GetCodeById(kpiID,"DHCWL.MKPI.MKPI")
		.i retData'="" s retData=retData_","
		.s retData=retData_code
		w "{success:true,tip:'ok',data:'"_retData_"'}"
	}
	
</script>